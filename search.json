[{"title":"Forum(1)","url":"/2022/05/18/Forum/","content":"<h2 id=\"帖子\"><a href=\"#帖子\" class=\"headerlink\" title=\"帖子\"></a>帖子</h2><h3 id=\"发帖\"><a href=\"#发帖\" class=\"headerlink\" title=\"发帖\"></a>发帖</h3><blockquote>\n<p>PostController.java</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ApiOperation(value = &quot;新增&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@PreAuthorize(&quot;isAuthenticated()&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/create&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> ApiResult&lt;Post&gt; <span class=\"title function_\">create</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> PostDTO dto, Principal principal)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> userService.getUserByUsername(principal.getName());</span><br><span class=\"line\">    <span class=\"type\">Post</span> <span class=\"variable\">post</span> <span class=\"operator\">=</span> postService.create(dto, user);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ApiResult.success(post);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>@PreAuthorize(&quot;isAuthenticated()&quot;)</code>注解表示需要登录才能访问。</p>\n</blockquote>\n<blockquote>\n<p>此方法中两个参数表示，前端给后端发送数据的格式，以及当前登录用户的信息。<br>当调用此方法时会通过Spring的Principal对象获取当前登录用户的信息。再将用户信息和前端发送的数据进行处理。</p>\n</blockquote>\n<blockquote>\n<p>PostServiceImpl.java</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"meta\">@Transactional(rollbackFor = Exception.class)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Post <span class=\"title function_\">create</span><span class=\"params\">(PostDTO dto, User user)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Post</span> <span class=\"variable\">post1</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.baseMapper.selectOne(<span class=\"keyword\">new</span> <span class=\"title class_\">LambdaQueryWrapper</span>&lt;Post&gt;().eq(Post::getTitle, wordFilter.replaceWords(dto.getTitle())));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ObjectUtils.isEmpty(post1))&#123;</span><br><span class=\"line\">            ApiAsserts.fail(<span class=\"string\">&quot;标题重复，请重新编辑&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//封装</span></span><br><span class=\"line\">        <span class=\"type\">Post</span> <span class=\"variable\">post</span> <span class=\"operator\">=</span> Post.builder()</span><br><span class=\"line\">                .userId(user.getId())</span><br><span class=\"line\"><span class=\"comment\">//                .title(dto.getTitle()) 敏感词过滤</span></span><br><span class=\"line\">                .title(wordFilter.replaceWords(dto.getTitle()))</span><br><span class=\"line\"><span class=\"comment\">//                .content(EmojiParser.parseToAliases(dto.getContent()))</span></span><br><span class=\"line\">                .content(EmojiParser.parseToAliases(wordFilter.replaceWords(dto.getContent())))</span><br><span class=\"line\">                .createTime(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.baseMapper.insert(post);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//用户积分增加</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">newScore</span> <span class=\"operator\">=</span> user.getScore() + <span class=\"number\">1</span>;</span><br><span class=\"line\">        userMapper.updateById(user.setScore(newScore));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//标签</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ObjectUtils.isEmpty(dto.getTags()))&#123;</span><br><span class=\"line\">            <span class=\"comment\">//保存标签</span></span><br><span class=\"line\">            List&lt;Tag&gt; tags = tagService.insertTags(dto.getTags());</span><br><span class=\"line\">            <span class=\"comment\">//处理标签与话题的关联</span></span><br><span class=\"line\">            postTagService.createPostTag(post.getId(),tags);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> post;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在此方法中，我们首先通过标题进行查询，如果查询到了相同的标题，则抛出异常。检查通过会通过<code>lombok</code>的<code>@Builder</code>注解进行封装，并将修改好的数据插入数据库。随之进行用户积分的增加与标签的保存。（在封装数据的时候会对帖子的标题以及内容进行敏感词过滤替换）</p>\n</blockquote>\n<h3 id=\"帖子详情\"><a href=\"#帖子详情\" class=\"headerlink\" title=\"帖子详情\"></a>帖子详情</h3><blockquote>\n<p>PostController.java</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ApiOperation(value = &quot;详情&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping()</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> ApiResult&lt;Map&lt;String, Object&gt;&gt; <span class=\"title function_\">view</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;id&quot;)</span> String id)</span> &#123;</span><br><span class=\"line\">        Map&lt;String, Object&gt; map = postService.viewPost(id);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ApiResult.success(map);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>PostServiceImpl.java</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title function_\">viewPost</span><span class=\"params\">(String id)</span> &#123;</span><br><span class=\"line\">        Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\">        <span class=\"type\">Post</span> <span class=\"variable\">post</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.baseMapper.selectById(id);</span><br><span class=\"line\">        Assert.notNull(post,<span class=\"string\">&quot;当前话题不存在,或已被作者删除&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//查询话题详情</span></span><br><span class=\"line\">        post.setView(post.getView()+<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.baseMapper.updateById(post);</span><br><span class=\"line\">        <span class=\"comment\">//emoji转码</span></span><br><span class=\"line\">        post.setContent(EmojiParser.parseToUnicode(post.getContent()));</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;post&quot;</span>, post);</span><br><span class=\"line\">        <span class=\"comment\">//标签</span></span><br><span class=\"line\">        QueryWrapper&lt;PostTag&gt;wrapper = <span class=\"keyword\">new</span> <span class=\"title class_\">QueryWrapper</span>&lt;&gt;();</span><br><span class=\"line\">        wrapper.lambda().eq(PostTag::getTopicId, post.getId());</span><br><span class=\"line\">        Set&lt;String&gt; set = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (PostTag articleTag : postTagService.list(wrapper))&#123;</span><br><span class=\"line\">            set.add(articleTag.getTagId());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        List&lt;Tag&gt; tags = tagService.listByIds(set);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;tags&quot;</span>, tags);</span><br><span class=\"line\">        <span class=\"comment\">//作者</span></span><br><span class=\"line\">        <span class=\"type\">ProfileVO</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> userService.getUserProfile(post.getUserId());</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;user&quot;</span>, user);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>查看帖子详情时，会首先判断数据库中是否存在这条数据。判断通过之后会将帖子的浏览量增加，并将帖子的内容转码。将转码后的帖子内容存进创建的map中。<br>封装好帖子信息之后，我们需要通过帖子id来查询当前帖子所关联的标签id。再通过这些标签id获得标签信息，并将结果封装进map。<br>第三步，我们需要通过帖子的作者id来查询作者的信息，并将结果封装进map。再将map封装进ApiResult返回。</p>\n</blockquote>\n<hr>\n<h2 id=\"评论\"><a href=\"#评论\" class=\"headerlink\" title=\"评论\"></a>评论</h2><h3 id=\"一级评论\"><a href=\"#一级评论\" class=\"headerlink\" title=\"一级评论\"></a>一级评论</h3><blockquote>\n<p>CommentController.java</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ApiOperation(value = &quot;新增评论&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@PreAuthorize(&quot;isAuthenticated()&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/add_comment&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> ApiResult&lt;Comment&gt; <span class=\"title function_\">add_comment</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> CommentDTO dto, Principal principal)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dto.getContent() == <span class=\"literal\">null</span> || <span class=\"string\">&quot;&quot;</span>.equals(dto.getContent()) || <span class=\"string\">&quot;\\n&quot;</span>.equals(dto.getContent())) &#123;</span><br><span class=\"line\">        ApiAsserts.fail(<span class=\"string\">&quot;评论内容不能为空&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> userService.getUserByUsername(principal.getName());</span><br><span class=\"line\">    <span class=\"type\">Comment</span> <span class=\"variable\">comment</span> <span class=\"operator\">=</span> commentService.create(dto, user);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ApiResult.success(comment);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在此方法中参数与上节发帖方法中的参数相同，不作过多解释。<br>在进入此方法时，会先检查评论内容是否为空，如果为空则抛出异常。 验证通过之后会调用getUserByUsername方法获取当前登录用户的信息，并将用户信息和前端发送的数据进行处理。</p>\n</blockquote>\n<blockquote>\n<p>CommentServiceImpl.java</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Comment <span class=\"title function_\">create</span><span class=\"params\">(CommentDTO dto, User user)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Comment</span> <span class=\"variable\">comment</span> <span class=\"operator\">=</span> Comment.builder()</span><br><span class=\"line\">                .userId(user.getId())</span><br><span class=\"line\">                .content(wordFilter.replaceWords(dto.getContent()))</span><br><span class=\"line\">                .topicId(dto.getTopic_id())</span><br><span class=\"line\">                .createTime(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.baseMapper.insert(comment);</span><br><span class=\"line\">        messageService.createMessage(user.getId(),postService.getById(dto.getTopic_id()).getUserId() ,<span class=\"string\">&quot;评论了你的帖子:&quot;</span> + comment.getContent());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> comment;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里首先对数据进行封装处理，并将封装结果插入数据库。然后调用<code>messageService</code>的<code>createMessage</code>方法，将当前评论的用户<code>id</code>和帖子的用户id作为参数传入，并将评论内容作为消息内容。</p>\n</blockquote>\n<hr>\n<h3 id=\"二级评论\"><a href=\"#二级评论\" class=\"headerlink\" title=\"二级评论\"></a>二级评论</h3><blockquote>\n<p>CommentController.java</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ApiOperation(value = &quot;新增二级评论&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@PreAuthorize(&quot;isAuthenticated()&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/add_child_comment&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> ApiResult&lt;Comment&gt; <span class=\"title function_\">add_child_comment</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> ChildCommentDTO dto,Principal principal)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dto.getChild_comment_content() == <span class=\"literal\">null</span> || <span class=\"string\">&quot;&quot;</span>.equals(dto.getChild_comment_content()) || <span class=\"string\">&quot;\\n&quot;</span>.equals(dto.getChild_comment_content())) &#123;</span><br><span class=\"line\">        ApiAsserts.fail(<span class=\"string\">&quot;评论内容不能为空&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> userService.getUserByUsername(principal.getName());</span><br><span class=\"line\">        <span class=\"type\">Comment</span> <span class=\"variable\">comment</span> <span class=\"operator\">=</span> commentService.create(dto, user);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ApiResult.success(comment);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>新增二级评论的方法逻辑其实是与上面的一级评论一样的，他们的不同只是二级评论在创建的时候会同时插入一级评论的id作为<code>roo_id</code>。 </p>\n</blockquote>\n<img src=\"/2022/05/18/Forum/img.png\" class=\"\" title=\"评论表\">\n\n<blockquote>\n<p>从这个表中其实可以看到，一级评论的<code>root_id</code>属性都是空的，而二级评论的<code>root_id</code>属性都是一级评论的id。下面来介绍一下二级评论的具体实现。</p>\n</blockquote>\n<blockquote>\n<p>CommentServiceImpl.java</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Comment <span class=\"title function_\">create</span><span class=\"params\">(ChildCommentDTO dto, User user)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Comment</span> <span class=\"variable\">comment</span> <span class=\"operator\">=</span> Comment.builder()</span><br><span class=\"line\">            .userId(user.getId())</span><br><span class=\"line\">            .content(wordFilter.replaceWords(dto.getChild_comment_content()))</span><br><span class=\"line\">            .topicId(<span class=\"built_in\">this</span>.getById(dto.getContent_parent_id()).getTopicId())</span><br><span class=\"line\">            .rootId(dto.getContent_parent_id())</span><br><span class=\"line\">            .createTime(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>())</span><br><span class=\"line\">            .build();</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.baseMapper.insert(comment);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> comment;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里首先对数据进行封装处理，并将封装结果插入数据库。然后调用<code>getById</code>方法获取父评论的信息，并将父评论的<code>topicId</code>属性作为该二级评论的<code>root_Id</code>属性。</p>\n</blockquote>\n","categories":["教程","JAVA"],"tags":["SpringBoot","Vue","教程"]},{"title":"Hexo 博客常用命令","url":"/2022/09/11/Hexo-%E5%8D%9A%E5%AE%A2%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","content":"<h1 id=\"新建文章\"><a href=\"#新建文章\" class=\"headerlink\" title=\"新建文章\"></a>新建文章</h1><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo <span class=\"keyword\">new</span> <span class=\"string\">&quot;文章标题&quot;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>缩写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo n <span class=\"string\">&quot;文章标题&quot;</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<hr>\n<h1 id=\"新建页面\"><a href=\"#新建页面\" class=\"headerlink\" title=\"新建页面\"></a>新建页面</h1><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo <span class=\"keyword\">new</span> page <span class=\"string\">&quot;页面名&quot;</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"生成静态页面至public目录\"><a href=\"#生成静态页面至public目录\" class=\"headerlink\" title=\"生成静态页面至public目录\"></a>生成静态页面至public目录</h1><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>缩写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n</blockquote>\n<hr>\n<h1 id=\"开启预览访问端口（端口地址默认4000）\"><a href=\"#开启预览访问端口（端口地址默认4000）\" class=\"headerlink\" title=\"开启预览访问端口（端口地址默认4000）\"></a>开启预览访问端口（端口地址默认4000）</h1><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>缩写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n</blockquote>\n<hr>\n<h1 id=\"部署到github\"><a href=\"#部署到github\" class=\"headerlink\" title=\"部署到github\"></a>部署到github</h1><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>缩写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n</blockquote>\n<hr>\n<h1 id=\"清除缓存\"><a href=\"#清除缓存\" class=\"headerlink\" title=\"清除缓存\"></a>清除缓存</h1><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"组合命令\"><a href=\"#组合命令\" class=\"headerlink\" title=\"组合命令\"></a>组合命令</h1><blockquote>\n<h2 id=\"生成并本地预览\"><a href=\"#生成并本地预览\" class=\"headerlink\" title=\"生成并本地预览\"></a>生成并本地预览</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo s -g</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"生成并上传\"><a href=\"#生成并上传\" class=\"headerlink\" title=\"生成并上传\"></a>生成并上传</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo d -g</span><br></pre></td></tr></table></figure>\n</blockquote>\n"},{"title":"Mysql学习","url":"/2022/09/11/Mysql%E5%AD%A6%E4%B9%A0/","content":"<h1 id=\"SQL-优化的几种方式\"><a href=\"#SQL-优化的几种方式\" class=\"headerlink\" title=\"SQL 优化的几种方式\"></a>SQL 优化的几种方式</h1><hr>\n<h2 id=\"1-SQL语句的优化\"><a href=\"#1-SQL语句的优化\" class=\"headerlink\" title=\"1.SQL语句的优化\"></a>1.SQL语句的优化</h2><blockquote>\n<h3 id=\"1-1-SQL语句中In包含的值不应过多。\"><a href=\"#1-1-SQL语句中In包含的值不应过多。\" class=\"headerlink\" title=\"1.1 SQL语句中In包含的值不应过多。\"></a>1.1 SQL语句中<code>In</code>包含的值不应过多。</h3><p>如 <code>select id from t where num in (1,2,3)</code>对于连续的值，应尽量使用<code>Between</code>，避免使用<code>In</code>。如<code>select id from t where num between 1 and 3</code>。</p>\n</blockquote>\n<hr>\n<blockquote>\n<h3 id=\"1-2-SELECT语句必须指明字段名称。\"><a href=\"#1-2-SELECT语句必须指明字段名称。\" class=\"headerlink\" title=\"1.2 SELECT语句必须指明字段名称。\"></a>1.2 SELECT语句必须指明字段名称。</h3><p>禁止使用<code>*</code>进行查询。<br>如<code>select * from t</code>需要修改为指明字段的查询<code>select id, name from t</code>。</p>\n</blockquote>\n<hr>\n<blockquote>\n<h3 id=\"1-3-在只查询一条数据的时候，使用Limit-1。\"><a href=\"#1-3-在只查询一条数据的时候，使用Limit-1。\" class=\"headerlink\" title=\"1.3 在只查询一条数据的时候，使用Limit 1。\"></a>1.3 在只查询一条数据的时候，使用<code>Limit 1</code>。</h3></blockquote>\n<hr>\n<blockquote>\n<h3 id=\"1-4-Where子句编写不当，会造成索引失效。\"><a href=\"#1-4-Where子句编写不当，会造成索引失效。\" class=\"headerlink\" title=\"1.4 Where子句编写不当，会造成索引失效。\"></a>1.4 Where子句编写不当，会造成索引失效。</h3><p><strong>以下行为都会造成引擎放弃使用索引而进行全表扫描</strong>。</p>\n<ol>\n<li>在Where子句中使用<code>!=</code>或<code>&lt;&gt;</code>操作符。建议使用<code>&gt;=</code>或<code>&lt;=</code></li>\n<li>在where子句中对字段进行<code>null</code>值判断。如<code>select id from user where name = null</code>（<code>null</code>判断中会根据<code>null</code>和非<code>null</code>的数量来进行判断是否走索引）</li>\n<li>在where子句中使用<code>or</code>来连接条件。如<code>select id from user  where num = 10 or num =20</code>，应修改为<code> select id from user where num = 10 union all select id from user where num = 20</code></li>\n<li>在where子句中对字段进行表达式判断。如<code>select id from user where num/2 = 100 </code>，应修改为<code>select id from user where num = 100*2</code>。</li>\n<li>在where子句中对字段进行函数操作，如<code>select id from user where substring(name,1,3) = &#39;abc&#39;</code>。</li>\n<li>在where子句中的<code>=</code>的左边进行函数、算数运行或其它表达式运算。</li>\n</ol>\n</blockquote>\n<hr>\n<blockquote>\n<h3 id=\"1-5-对于联合索引来说，要遵守最左前缀法则。\"><a href=\"#1-5-对于联合索引来说，要遵守最左前缀法则。\" class=\"headerlink\" title=\"1.5 对于联合索引来说，要遵守最左前缀法则。\"></a>1.5 对于联合索引来说，要遵守最左前缀法则。</h3><p>例如组合索引(id,name,sex)  使用的时候,可以id 或者id,name .  禁止直接name,或者sex.会导致联合索引失败<br>注意: id, name,sex 这三个字段填写顺序不会有影响,  mysql会自动优化成最左匹配的顺序.<br>前三条sql都能命中索引,中间两条由于不符合最左匹配原则,索引失效.<br>最后一条sql 由于有最左索引id 所以索引部分成功,部分失效.  id字段索引使用成功.  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">explain select * from  `user_test` where uid=10  ; </span><br><span class=\"line\">explain select * from  `user_test` where uid=10 and name=&#x27;张三&#x27;;</span><br><span class=\"line\">explain select * from  `user_test` where uid=10 and name=&#x27;张三&#x27; and phone=&#x27;13527748096&#x27;;</span><br><span class=\"line\">explain select * from  `user_test` where name=&#x27;张三&#x27; and phone=&#x27;13527748096&#x27;;</span><br><span class=\"line\">explain select * from  `user_test` where name=&#x27;张三&#x27;;</span><br><span class=\"line\">explain select * from  `user_test` where uid=10 and phone=&#x27;13527748096&#x27;;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<hr>\n<blockquote>\n<h3 id=\"1-6-尽量使用inner-join，避免left-join。\"><a href=\"#1-6-尽量使用inner-join，避免left-join。\" class=\"headerlink\" title=\"1.6 尽量使用inner join，避免left join。\"></a>1.6 尽量使用inner join，避免left join。</h3><p>如果连接方式是inner join，在没有其他过滤条件的情况下MySQL会自动选择小表作为驱动表，但是left join在驱动表的选择上遵循的是左边驱动右边的原则，即left join左边的表名为驱动表。</p>\n</blockquote>\n<hr>\n<blockquote>\n<h3 id=\"1-7-不建议使用-前缀模糊查询。\"><a href=\"#1-7-不建议使用-前缀模糊查询。\" class=\"headerlink\" title=\"1.7 不建议使用%前缀模糊查询。\"></a>1.7 不建议使用%前缀模糊查询。</h3><p>如<code>like &quot;%name&quot;</code>或者<code>like &quot;%name%&quot;</code>，会造成索引失效，应修改为<code>like &quot;name%&quot;</code>。</p>\n</blockquote>\n<hr>\n<blockquote>\n<h3 id=\"1-8-字符串类型的字段-查询的时候如果不加引号’’-会导致自动进行隐式转换-然后索引失效\"><a href=\"#1-8-字符串类型的字段-查询的时候如果不加引号’’-会导致自动进行隐式转换-然后索引失效\" class=\"headerlink\" title=\"1.8 字符串类型的字段 查询的时候如果不加引号’’  ,会导致自动进行隐式转换,然后索引失效\"></a>1.8 字符串类型的字段 查询的时候如果不加引号’’  ,会导致自动进行隐式转换,然后索引失效</h3></blockquote>\n<hr>\n<blockquote>\n<h3 id=\"1-9-order-by-排序优化-排序时-使用有索引的字段进行排序\"><a href=\"#1-9-order-by-排序优化-排序时-使用有索引的字段进行排序\" class=\"headerlink\" title=\"1.9 order by 排序优化 (排序时,使用有索引的字段进行排序)\"></a>1.9 order by 排序优化 (排序时,使用有索引的字段进行排序)</h3></blockquote>\n<hr>\n<blockquote>\n<h3 id=\"1-10-count-优化-速度-count-gt-count-1-gt-count-字段\"><a href=\"#1-10-count-优化-速度-count-gt-count-1-gt-count-字段\" class=\"headerlink\" title=\"1.10 count 优化     速度:count(*)&gt;count(1)&gt;count(字段)\"></a>1.10 count 优化     速度:count(*)&gt;count(1)&gt;count(字段)</h3><p> inndb引擎的使用如下  (MyIASM默认存了数据总数,所以效率最高)<br>1:count(字段):遍历整张表 会把每一行的字段值取出来,然后返回<br>2:count(1): 便利整张表,但不取值,对于返回的数据,放入1进去.然后累加<br>3:count(*):inndb引擎,特意做了优化,不会取出值,直接服务层进行累加  </p>\n</blockquote>\n"},{"title":"七牛云使用笔记","url":"/2022/05/11/oss/","content":"<h2 id=\"七牛云配置\"><a href=\"#七牛云配置\" class=\"headerlink\" title=\"七牛云配置\"></a>七牛云配置</h2><ul>\n<li><p>进入七牛云官网<a href=\"https://www.qiniu.com/\">七牛云 - 国内领先的企业级云服务商 (qiniu.com)</a></p>\n</li>\n<li><p>注册七牛云账号并登录,创建存储</p>\n</li>\n</ul>\n<img src=\"/2022/05/11/oss/image-20220429154222835.png\" class=\"\" title=\"This is an test img\">\n\n<img src=\"/2022/05/11/oss/image-20220429154426967.png\" class=\"\" title=\"This is an test img\">\n\n<img src=\"/2022/05/11/oss/image-20220429155608766.png\" class=\"\" title=\"This is an test img\">\n\n\n\n\n<h3 id=\"创建SpringBoot项目\"><a href=\"#创建SpringBoot项目\" class=\"headerlink\" title=\"创建SpringBoot项目\"></a>创建SpringBoot项目</h3><blockquote>\n<p> application.yml</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#七牛云配置</span></span><br><span class=\"line\"><span class=\"attr\">oss:</span></span><br><span class=\"line\">  <span class=\"attr\">domain:</span> <span class=\"string\">http://******.hd-bkt.clouddn.com/</span>  <span class=\"comment\"># 访问域名(默认使用七牛云测试域名) 测试域名有效期仅为30天，建议更换为自有域名</span></span><br><span class=\"line\">  <span class=\"attr\">accessKey:</span> <span class=\"string\">*****</span> <span class=\"comment\"># 公钥 AK</span></span><br><span class=\"line\">  <span class=\"attr\">secretKey:</span> <span class=\"string\">*****</span> <span class=\"comment\"># 私钥 SK</span></span><br><span class=\"line\">  <span class=\"attr\">bucket:</span> <span class=\"string\">****</span>  <span class=\"comment\">#存储空间名称 创建的存储空间名称</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>pom.xml</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.google.code.gson<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>gson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.8.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.qiniu<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>qiniu-java-sdk<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>[7.7.0, 7.7.99]<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>UploadController.java</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Api(tags = &quot;上传&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UploadController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UploadService uploadService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation(value = &quot;文件上传&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/upload&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ApiResult <span class=\"title function_\">upload</span><span class=\"params\">(<span class=\"meta\">@RequestPart</span> MultipartFile file)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> uploadService.upload(file);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ApiResult.success(url);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>UploadServiceImpl.java</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;oss&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UploadServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UploadService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String accessKey;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String secretKey;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String bucket;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String domain;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">upload</span><span class=\"params\">(MultipartFile file)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断文件类型</span></span><br><span class=\"line\">        <span class=\"comment\">//获取原始文件名</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (file == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            ApiAsserts.fail(<span class=\"string\">&quot;文件上传失败！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">originalFileName</span> <span class=\"operator\">=</span> file.getOriginalFilename();</span><br><span class=\"line\">        <span class=\"comment\">//对原始文件名进行判断</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> originalFileName != <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!originalFileName.endsWith(<span class=\"string\">&quot;.png&quot;</span>) &amp;&amp; !originalFileName.endsWith(<span class=\"string\">&quot;.jpg&quot;</span>) &amp;&amp; !originalFileName.endsWith(<span class=\"string\">&quot;.txt&quot;</span>))&#123;</span><br><span class=\"line\">            <span class=\"comment\">//TODO 抛出错误，此处只允许.png</span></span><br><span class=\"line\">            ApiAsserts.fail(<span class=\"string\">&quot;只可以上传png格式的图片哦！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">path</span> <span class=\"operator\">=</span> PathUtils.generateFilePath(originalFileName);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> uploadOss(file,path);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String <span class=\"title function_\">uploadOss</span><span class=\"params\">(MultipartFile file , String path)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Configuration</span> <span class=\"variable\">cfg</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Configuration</span>(Region.autoRegion());</span><br><span class=\"line\">        <span class=\"type\">UploadManager</span> <span class=\"variable\">uploadManager</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UploadManager</span>(cfg);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> path;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">InputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> file.getInputStream();</span><br><span class=\"line\">            <span class=\"type\">Auth</span> <span class=\"variable\">auth</span> <span class=\"operator\">=</span> Auth.create(accessKey, secretKey);</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">upToken</span> <span class=\"operator\">=</span> auth.uploadToken(bucket);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">Response</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> uploadManager.put(inputStream, key, upToken, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                <span class=\"type\">DefaultPutRet</span> <span class=\"variable\">putRet</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Gson</span>().fromJson(response.bodyString(), DefaultPutRet.class);</span><br><span class=\"line\">                System.out.println(putRet.key);</span><br><span class=\"line\">                System.out.println(putRet.hash);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> domain+key;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (QiniuException e) &#123;</span><br><span class=\"line\">                <span class=\"type\">Response</span> <span class=\"variable\">r</span> <span class=\"operator\">=</span> e.response;</span><br><span class=\"line\">                System.err.println(r.toString());</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    System.err.println(r.bodyString());</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (QiniuException e2) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;www&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>PathUtils.java</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PathUtils</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">generateFilePath</span><span class=\"params\">(String fileName)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//根据日期生成路径 2022/1/15/</span></span><br><span class=\"line\">        <span class=\"type\">SimpleDateFormat</span> <span class=\"variable\">sdf</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy/MM/dd/&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">datePath</span> <span class=\"operator\">=</span> sdf.format(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">        <span class=\"comment\">//uuid作为文件名</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">uuid</span> <span class=\"operator\">=</span> UUID.randomUUID().toString().replaceAll(<span class=\"string\">&quot;-&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//后缀和文件后缀一致</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> fileName.lastIndexOf(<span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//test.jpg -&gt; .jpg</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">fileType</span> <span class=\"operator\">=</span> fileName.substring(index);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>().append(datePath).append(uuid).append(fileType).toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>使用ApiPost进行测试</p>\n<img src=\"/2022/05/11/oss/image-20220429162138190.png\" class=\"\" title=\"测试\">\n\n\n<img src=\"/2022/05/11/oss/image-20220429164117255.png\" class=\"\" title=\"测试\">\n\n\n<p>即可在浏览器中访问到此资源。</p>\n"}]